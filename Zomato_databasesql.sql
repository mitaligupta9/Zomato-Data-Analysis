create table zomato (
	order_id serial primary key,
	user_id	varchar(10),
	cuisine	varchar(15),
	dish_name	varchar(50),
	restro_id	varchar(10),
	quantity	int,
	order_date	date,
	amount	int,
	rating	float,
	city	varchar(25),
	delivery_time int,	
	referrer_id	varchar(10),
	refrerred_id	varchar(10),
	order_timestamp	timestamp,
	sale_flag varchar(5)

)


-- Write an SQL query to find the top 5 most-ordered dishes from a given restaurant.

select dish_name,
	restro_id,
	sum(quantity)
from zomato
	where restro_id = 'R101'
group by 1,2
order by 2 desc
limit 5


--  Write a Query to Retrieve All Orders Placed in the Last 30 Days for a Specific User 

select * from zomato
	where order_date >= now() - interval '30 Days'
	And
	user_id = 'U123'
	
-- Write a Query to Find the Total Revenue Generated by All Restaurants in the Last Month 

select 
	sum(amount) as "total_revenue"
	from zomato
	where order_date between '2025-02-01' and '2025-02-28'

	

select 
	sum(amount) as "total_revenue"
	from zomato
	where order_date >= date_trunc('Month',current_date - interval '1 Month')
	and order_date < date_trunc('Month', current_date)


-- Write a Query to Retrieve the Top 10 Restaurants with the Highest Average Customer Rating 

select restro_id,
	round(avg(rating::int),2) as "average_rating"
	from zomato
	group by 1
	order by 1
	limit 10 

-- Write a query to List All Customers Who Have Ordered at Least One Dish from More Than 3 Different Restaurants 	


	select user_id,
	count(distinct restro_id)
	from zomato
	group by 1
	having count(distinct restro_id) > 3

-- Write a Query to Identify Restaurants Where the Average Order Value Is 
-- Higher Than the Overall Average Order Value Across All Restaurants 

with restro_order as
	(
select restro_id,
	avg(amount) as "restro_avg_order"
	from zomato
	group by 1),
avg_order as 
	(
select avg(amount) as "total_avg_order" from zomato)
	
	select a.restro_id, a.restro_avg_order
	from restro_order a ,avg_order o
	where a.restro_avg_order > o.total_avg_order


-- Write a Query to Group Orders by Cuisine Type and Calculate the Total Revenue for Each Cuisine 	
	
	select cuisine,
	sum(amount) as "total_revenue"
	from zomato
	group by 1
	order by 2 desc


-- Write a Query to Find the Rank of Each Restaurant Based on Total Revenue Within Each City
	
	select city,
	restro_id,
	sum(amount) as "total_revenue",
	rank() over(partition by city order by sum(amount) desc )
	from zomato
	group by 1,2

-- Categorize Restaurants into "High Revenue," "Medium Revenue," and 
--"Low Revenue" Based on Their Monthly Sales 

with cte_monthly_sale as
	(
select restro_id,
	To_char(order_date, 'Month') as "Month",
	sum(amount) as "total_sale"
	from zomato
	group by 1,2
	order by 1)

	select *,
			CASE
				WHEN total_sale < 300 THEN 'Low Revenue'
				WHEN total_sale BETWEEN 300 AND 500 THEN 'Medium Revenue'
				ELSE 'High Revenue'
			END
	from cte_monthly_sale

--  Write a Query to Find the Top 3 Dishes Sold for Each Restaurant in a Specific City 

select 	* from
	(select 
	restro_id,
	dish_name,
	city,
	sum(quantity),
	rank() over(partition by city order by sum(quantity) desc) as "ranking"
	from zomato
	group by 1,2,3)
where city = 'Indore'
limit 3

-- Use a CTE to Calculate the Monthly Active Users and Their Most Ordered Dish for the Past 6 Months  

with cte_recent_order as	
	(select user_id,
	dish_name,
	order_date,
	count(*) as "order_count"
	from zomato
	where order_date >= now() - interval '6 Months'
	group by 1,2,3),

most_order as
	(select user_id ,
	dish_name ,
	order_date,
	rank() over(partition by user_id)
	from zomato)

	select user_id,
	order_date,
	dish_name 
	from most_order  
	where rank = 1

--  Write a Query to Retrieve the Top 5 Restaurants With the Fastest Average Delivery Time 

select restro_id,
	round(avg(delivery_time),2) as "avg_delivery_time"
	from zomato
	group by 1
	order by 2 desc
	limit 5

-- Write a Query to Identify Customers Who Have Not Placed Any Orders 
--in the Last 6 Months But Were Active in the Previous 6 Months 

with cte_last_6_month as
	(
	select user_id,
	order_date
	from zomato
	where order_date >= now() - interval '6 Months'),

cte_previous_6months as
	(select user_id,
	order_date
	from zomato
	where order_date >= now() - interval '12 Months'
	AND order_date < now() - interval '6 Months')

select distinct user_id
from cte_previous_6months
where user_id not in (select user_id from cte_last_6_month)
	
--  Identify the Top 3 Cities With the Highest Percentage of Premium Customers 

with cte_customer_spend as
	(
select user_id,
city,
round(avg(amount),2) as "avg_spend"
from zomato
group by 1,2),

cte_premium_customer as (

	select city,
	count(user_id) as "premium_count"
	from cte_customer_spend
	where avg_spend > 200
	group by 1
	),

cte_customer_count as (
	select city,
	count(user_id) as "total_customer"
	from zomato
	group by 1)

SELECT p.city,  
       p.premium_count,  
       cc.total_customer,  
       (p.premium_Count * 100.0 / cc.total_customer) AS premium_percentage 
FROM cte_premium_customer p 
JOIN cte_customer_count cc ON p.city = cc.city 
ORDER BY premium_percentage DESC 
LIMIT 3;


-- Calculate the Contribution of Each City to the Total Revenue for a Given Year 

with cte_revenue as
	(
select 
	city,
	sum(amount) as "total_revenue"
	from zomato
group by 1
),
cte_overall as (
select 
	sum(amount) as "overall_revenue" 
	from zomato --2500
)
select city,
	total_revenue*100/overall_revenue as "Contribution_revenue%"
	from cte_revenue,cte_overall







